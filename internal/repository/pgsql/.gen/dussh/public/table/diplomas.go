//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Diplomas = newDiplomasTable("public", "diplomas", "")

type diplomasTable struct {
	postgres.Table

	// Columns
	DiplomaID             postgres.ColumnInteger
	DiplomaUniversity     postgres.ColumnString
	DiplomaFaculty        postgres.ColumnString
	DiplomaCurriculum     postgres.ColumnString
	DiplomaSpecialization postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type DiplomasTable struct {
	diplomasTable

	EXCLUDED diplomasTable
}

// AS creates new DiplomasTable with assigned alias
func (a DiplomasTable) AS(alias string) *DiplomasTable {
	return newDiplomasTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new DiplomasTable with assigned schema name
func (a DiplomasTable) FromSchema(schemaName string) *DiplomasTable {
	return newDiplomasTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new DiplomasTable with assigned table prefix
func (a DiplomasTable) WithPrefix(prefix string) *DiplomasTable {
	return newDiplomasTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new DiplomasTable with assigned table suffix
func (a DiplomasTable) WithSuffix(suffix string) *DiplomasTable {
	return newDiplomasTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newDiplomasTable(schemaName, tableName, alias string) *DiplomasTable {
	return &DiplomasTable{
		diplomasTable: newDiplomasTableImpl(schemaName, tableName, alias),
		EXCLUDED:      newDiplomasTableImpl("", "excluded", ""),
	}
}

func newDiplomasTableImpl(schemaName, tableName, alias string) diplomasTable {
	var (
		DiplomaIDColumn             = postgres.IntegerColumn("diploma_id")
		DiplomaUniversityColumn     = postgres.StringColumn("diploma_university")
		DiplomaFacultyColumn        = postgres.StringColumn("diploma_faculty")
		DiplomaCurriculumColumn     = postgres.StringColumn("diploma_curriculum")
		DiplomaSpecializationColumn = postgres.StringColumn("diploma_specialization")
		allColumns                  = postgres.ColumnList{DiplomaIDColumn, DiplomaUniversityColumn, DiplomaFacultyColumn, DiplomaCurriculumColumn, DiplomaSpecializationColumn}
		mutableColumns              = postgres.ColumnList{DiplomaUniversityColumn, DiplomaFacultyColumn, DiplomaCurriculumColumn, DiplomaSpecializationColumn}
	)

	return diplomasTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		DiplomaID:             DiplomaIDColumn,
		DiplomaUniversity:     DiplomaUniversityColumn,
		DiplomaFaculty:        DiplomaFacultyColumn,
		DiplomaCurriculum:     DiplomaCurriculumColumn,
		DiplomaSpecialization: DiplomaSpecializationColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
