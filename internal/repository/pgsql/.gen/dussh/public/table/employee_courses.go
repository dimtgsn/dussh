//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var EmployeeCourses = newEmployeeCoursesTable("public", "employee_courses", "")

type employeeCoursesTable struct {
	postgres.Table

	// Columns
	CourseID   postgres.ColumnInteger
	EmployeeID postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type EmployeeCoursesTable struct {
	employeeCoursesTable

	EXCLUDED employeeCoursesTable
}

// AS creates new EmployeeCoursesTable with assigned alias
func (a EmployeeCoursesTable) AS(alias string) *EmployeeCoursesTable {
	return newEmployeeCoursesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new EmployeeCoursesTable with assigned schema name
func (a EmployeeCoursesTable) FromSchema(schemaName string) *EmployeeCoursesTable {
	return newEmployeeCoursesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new EmployeeCoursesTable with assigned table prefix
func (a EmployeeCoursesTable) WithPrefix(prefix string) *EmployeeCoursesTable {
	return newEmployeeCoursesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new EmployeeCoursesTable with assigned table suffix
func (a EmployeeCoursesTable) WithSuffix(suffix string) *EmployeeCoursesTable {
	return newEmployeeCoursesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newEmployeeCoursesTable(schemaName, tableName, alias string) *EmployeeCoursesTable {
	return &EmployeeCoursesTable{
		employeeCoursesTable: newEmployeeCoursesTableImpl(schemaName, tableName, alias),
		EXCLUDED:             newEmployeeCoursesTableImpl("", "excluded", ""),
	}
}

func newEmployeeCoursesTableImpl(schemaName, tableName, alias string) employeeCoursesTable {
	var (
		CourseIDColumn   = postgres.IntegerColumn("course_id")
		EmployeeIDColumn = postgres.IntegerColumn("employee_id")
		allColumns       = postgres.ColumnList{CourseIDColumn, EmployeeIDColumn}
		mutableColumns   = postgres.ColumnList{}
	)

	return employeeCoursesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		CourseID:   CourseIDColumn,
		EmployeeID: EmployeeIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
