//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Employees = newEmployeesTable("public", "employees", "")

type employeesTable struct {
	postgres.Table

	// Columns
	EmployeeID     postgres.ColumnInteger
	PersonalInfoID postgres.ColumnInteger
	PositionID     postgres.ColumnInteger
	CourseID       postgres.ColumnInteger
	DiplomaID      postgres.ColumnInteger
	DegreeID       postgres.ColumnInteger
	TitleID        postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type EmployeesTable struct {
	employeesTable

	EXCLUDED employeesTable
}

// AS creates new EmployeesTable with assigned alias
func (a EmployeesTable) AS(alias string) *EmployeesTable {
	return newEmployeesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new EmployeesTable with assigned schema name
func (a EmployeesTable) FromSchema(schemaName string) *EmployeesTable {
	return newEmployeesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new EmployeesTable with assigned table prefix
func (a EmployeesTable) WithPrefix(prefix string) *EmployeesTable {
	return newEmployeesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new EmployeesTable with assigned table suffix
func (a EmployeesTable) WithSuffix(suffix string) *EmployeesTable {
	return newEmployeesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newEmployeesTable(schemaName, tableName, alias string) *EmployeesTable {
	return &EmployeesTable{
		employeesTable: newEmployeesTableImpl(schemaName, tableName, alias),
		EXCLUDED:       newEmployeesTableImpl("", "excluded", ""),
	}
}

func newEmployeesTableImpl(schemaName, tableName, alias string) employeesTable {
	var (
		EmployeeIDColumn     = postgres.IntegerColumn("employee_id")
		PersonalInfoIDColumn = postgres.IntegerColumn("personal_info_id")
		PositionIDColumn     = postgres.IntegerColumn("position_id")
		CourseIDColumn       = postgres.IntegerColumn("course_id")
		DiplomaIDColumn      = postgres.IntegerColumn("diploma_id")
		DegreeIDColumn       = postgres.IntegerColumn("degree_id")
		TitleIDColumn        = postgres.IntegerColumn("title_id")
		allColumns           = postgres.ColumnList{EmployeeIDColumn, PersonalInfoIDColumn, PositionIDColumn, CourseIDColumn, DiplomaIDColumn, DegreeIDColumn, TitleIDColumn}
		mutableColumns       = postgres.ColumnList{PersonalInfoIDColumn, PositionIDColumn, CourseIDColumn, DiplomaIDColumn, DegreeIDColumn, TitleIDColumn}
	)

	return employeesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		EmployeeID:     EmployeeIDColumn,
		PersonalInfoID: PersonalInfoIDColumn,
		PositionID:     PositionIDColumn,
		CourseID:       CourseIDColumn,
		DiplomaID:      DiplomaIDColumn,
		DegreeID:       DegreeIDColumn,
		TitleID:        TitleIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
