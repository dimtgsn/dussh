//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var PersonalInfo = newPersonalInfoTable("public", "personal_info", "")

type personalInfoTable struct {
	postgres.Table

	// Columns
	PersonalInfoID postgres.ColumnInteger
	CredsID        postgres.ColumnInteger
	Name           postgres.ColumnString
	MiddleName     postgres.ColumnString
	Surname        postgres.ColumnString
	Email          postgres.ColumnString
	RolesID        postgres.ColumnInteger
	Phone          postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type PersonalInfoTable struct {
	personalInfoTable

	EXCLUDED personalInfoTable
}

// AS creates new PersonalInfoTable with assigned alias
func (a PersonalInfoTable) AS(alias string) *PersonalInfoTable {
	return newPersonalInfoTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new PersonalInfoTable with assigned schema name
func (a PersonalInfoTable) FromSchema(schemaName string) *PersonalInfoTable {
	return newPersonalInfoTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new PersonalInfoTable with assigned table prefix
func (a PersonalInfoTable) WithPrefix(prefix string) *PersonalInfoTable {
	return newPersonalInfoTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new PersonalInfoTable with assigned table suffix
func (a PersonalInfoTable) WithSuffix(suffix string) *PersonalInfoTable {
	return newPersonalInfoTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newPersonalInfoTable(schemaName, tableName, alias string) *PersonalInfoTable {
	return &PersonalInfoTable{
		personalInfoTable: newPersonalInfoTableImpl(schemaName, tableName, alias),
		EXCLUDED:          newPersonalInfoTableImpl("", "excluded", ""),
	}
}

func newPersonalInfoTableImpl(schemaName, tableName, alias string) personalInfoTable {
	var (
		PersonalInfoIDColumn = postgres.IntegerColumn("personal_info_id")
		CredsIDColumn        = postgres.IntegerColumn("creds_id")
		NameColumn           = postgres.StringColumn("name")
		MiddleNameColumn     = postgres.StringColumn("middle_name")
		SurnameColumn        = postgres.StringColumn("surname")
		EmailColumn          = postgres.StringColumn("email")
		RolesIDColumn        = postgres.IntegerColumn("roles_id")
		PhoneColumn          = postgres.StringColumn("phone")
		allColumns           = postgres.ColumnList{PersonalInfoIDColumn, CredsIDColumn, NameColumn, MiddleNameColumn, SurnameColumn, EmailColumn, RolesIDColumn, PhoneColumn}
		mutableColumns       = postgres.ColumnList{CredsIDColumn, NameColumn, MiddleNameColumn, SurnameColumn, EmailColumn, RolesIDColumn, PhoneColumn}
	)

	return personalInfoTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		PersonalInfoID: PersonalInfoIDColumn,
		CredsID:        CredsIDColumn,
		Name:           NameColumn,
		MiddleName:     MiddleNameColumn,
		Surname:        SurnameColumn,
		Email:          EmailColumn,
		RolesID:        RolesIDColumn,
		Phone:          PhoneColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
