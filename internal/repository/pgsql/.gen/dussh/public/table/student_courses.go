//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var StudentCourses = newStudentCoursesTable("public", "student_courses", "")

type studentCoursesTable struct {
	postgres.Table

	// Columns
	CourseID  postgres.ColumnInteger
	StudentID postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type StudentCoursesTable struct {
	studentCoursesTable

	EXCLUDED studentCoursesTable
}

// AS creates new StudentCoursesTable with assigned alias
func (a StudentCoursesTable) AS(alias string) *StudentCoursesTable {
	return newStudentCoursesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new StudentCoursesTable with assigned schema name
func (a StudentCoursesTable) FromSchema(schemaName string) *StudentCoursesTable {
	return newStudentCoursesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new StudentCoursesTable with assigned table prefix
func (a StudentCoursesTable) WithPrefix(prefix string) *StudentCoursesTable {
	return newStudentCoursesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new StudentCoursesTable with assigned table suffix
func (a StudentCoursesTable) WithSuffix(suffix string) *StudentCoursesTable {
	return newStudentCoursesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newStudentCoursesTable(schemaName, tableName, alias string) *StudentCoursesTable {
	return &StudentCoursesTable{
		studentCoursesTable: newStudentCoursesTableImpl(schemaName, tableName, alias),
		EXCLUDED:            newStudentCoursesTableImpl("", "excluded", ""),
	}
}

func newStudentCoursesTableImpl(schemaName, tableName, alias string) studentCoursesTable {
	var (
		CourseIDColumn  = postgres.IntegerColumn("course_id")
		StudentIDColumn = postgres.IntegerColumn("student_id")
		allColumns      = postgres.ColumnList{CourseIDColumn, StudentIDColumn}
		mutableColumns  = postgres.ColumnList{}
	)

	return studentCoursesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		CourseID:  CourseIDColumn,
		StudentID: StudentIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
