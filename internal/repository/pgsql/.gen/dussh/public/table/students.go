//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Students = newStudentsTable("public", "students", "")

type studentsTable struct {
	postgres.Table

	// Columns
	StudentID      postgres.ColumnInteger
	PersonalInfoID postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type StudentsTable struct {
	studentsTable

	EXCLUDED studentsTable
}

// AS creates new StudentsTable with assigned alias
func (a StudentsTable) AS(alias string) *StudentsTable {
	return newStudentsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new StudentsTable with assigned schema name
func (a StudentsTable) FromSchema(schemaName string) *StudentsTable {
	return newStudentsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new StudentsTable with assigned table prefix
func (a StudentsTable) WithPrefix(prefix string) *StudentsTable {
	return newStudentsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new StudentsTable with assigned table suffix
func (a StudentsTable) WithSuffix(suffix string) *StudentsTable {
	return newStudentsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newStudentsTable(schemaName, tableName, alias string) *StudentsTable {
	return &StudentsTable{
		studentsTable: newStudentsTableImpl(schemaName, tableName, alias),
		EXCLUDED:      newStudentsTableImpl("", "excluded", ""),
	}
}

func newStudentsTableImpl(schemaName, tableName, alias string) studentsTable {
	var (
		StudentIDColumn      = postgres.IntegerColumn("student_id")
		PersonalInfoIDColumn = postgres.IntegerColumn("personal_info_id")
		allColumns           = postgres.ColumnList{StudentIDColumn, PersonalInfoIDColumn}
		mutableColumns       = postgres.ColumnList{PersonalInfoIDColumn}
	)

	return studentsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		StudentID:      StudentIDColumn,
		PersonalInfoID: PersonalInfoIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
